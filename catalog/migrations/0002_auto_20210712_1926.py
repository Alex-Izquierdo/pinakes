# Generated by Django 3.2.4 on 2021-07-12 19:26

from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
        ('catalog', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('state', models.CharField(choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Canceled', 'Canceled'), ('Completed', 'Completed'), ('Created', 'Created'), ('Denied', 'Denied'), ('Failed', 'Failed'), ('Ordered', 'Ordered')], default='Created', editable=False, max_length=10)),
                ('order_request_sent_at', models.DateTimeField(editable=False, null=True)),
                ('completed_at', models.DateTimeField(editable=False, null=True)),
                ('owner', models.CharField(default='', max_length=255)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.tenant')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='portfolio',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='portfolioitem',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64)),
                ('state', models.CharField(choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Canceled', 'Canceled'), ('Completed', 'Completed'), ('Created', 'Created'), ('Denied', 'Denied'), ('Failed', 'Failed'), ('Ordered', 'Ordered')], default='Created', editable=False, max_length=10)),
                ('order_request_sent_at', models.DateTimeField(editable=False, null=True)),
                ('completed_at', models.DateTimeField(editable=False, null=True)),
                ('owner', models.CharField(default='', max_length=255)),
                ('count', models.SmallIntegerField(default=0, editable=False)),
                ('inventory_task_ref', models.CharField(default='', max_length=64)),
                ('service_plan_ref', models.CharField(default='', max_length=64)),
                ('service_instance_ref', models.CharField(default='', max_length=64)),
                ('service_parameters', models.JSONField(blank=True, null=True)),
                ('service_parameters_raw', models.JSONField(blank=True, null=True)),
                ('provider_control_parameters', models.JSONField(blank=True, null=True)),
                ('context', models.JSONField(blank=True, null=True)),
                ('artifacts', models.JSONField(blank=True, null=True)),
                ('external_url', models.URLField(blank=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.order')),
                ('portfolio_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.portfolioitem')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.tenant')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddConstraint(
            model_name='orderitem',
            constraint=models.CheckConstraint(check=models.Q(('name__length__gt', 0)), name='catalog_orderitem_name_empty'),
        ),
        migrations.AddConstraint(
            model_name='orderitem',
            constraint=models.UniqueConstraint(fields=('name', 'tenant', 'order'), name='catalog_orderitem_name_unique'),
        ),
    ]
